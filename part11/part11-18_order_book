# Write your solution here:
class Task:
    task_id = 0

    def __init__(self, description: str, programmer: str, workload: int, id: int = 0, finished: bool = False):
        self.description = description
        self.programmer = programmer
        self.workload = workload
        Task.task_id += 1
        self.id = Task.task_id
        self.finished = False

    def is_finished(self):
        return self.finished

    def mark_finished(self):
        self.finished = True

    def __str__(self):
        if self.finished == False:
            finish = "NOT FINISHED"
        else:
            finish = "FINISHED"
        return f"{self.id}: {self.description} ({self.workload} hours), programmer {self.programmer} {finish}"


class OrderBook:
    def __init__(self):
        self.tasks = []

    def add_order(self, description: str, programmer: str, workload: int):
        self.tasks.append(Task(description, programmer, workload))

    def all_orders(self):
        return self.tasks

    def programmers(self):

        return list(set([task.programmer for task in self.tasks]))

    def mark_finished(self, id: int):
        if id not in [task.id for task in self.tasks]:
            raise ValueError
        for task in self.tasks:
            if task.id == id:
                task.mark_finished()

    def finished_orders(self):
        return [task for task in self.tasks if task.finished == True]

    def unfinished_orders(self):
        return [task for task in self.tasks if task.finished == False]

    def status_of_programmer(self, programmer: str):
        if programmer not in [task.programmer for task in self.tasks]:
            raise ValueError

        unfinish = len(
            [task for task in self.tasks if task.programmer == programmer and task.finished == False])

        finish = len(
            [task for task in self.tasks if task.programmer == programmer and task.finished == True])

        unfinish_hrs = sum(
            [task.workload for task in self.tasks if task.programmer == programmer and task.finished == False])
        finish_hrs = sum(
            [task.workload for task in self.tasks if task.programmer == programmer and task.finished == True])
        return (finish, unfinish, finish_hrs, unfinish_hrs)


if __name__ == "__main__":
    orders = OrderBook()
    orders.add_order("program webstore", "Adele", 10)
    orders.add_order("program mobile app for workload accounting", "Adele", 25)
    orders.add_order("program app for practising mathematics", "Adele", 100)
    orders.add_order("program the next facebook", "Eric", 1000)

    orders.mark_finished(1)
    orders.mark_finished(2)

    status = orders.status_of_programmer("Adele")
    print(status)
